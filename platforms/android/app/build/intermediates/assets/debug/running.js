!function(t){function e(i){if(n[i])return n[i].exports;var s=n[i]={exports:{},id:i,loaded:!1};return t[i].call(s.exports,s,s.exports,e),s.loaded=!0,s.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){var i=n(27),s=n(28),a=n(29);__weex_define__("@weex-component/33d213ae1c7dedf0e9fbbab44c74105d",[],function(t,e,n){a(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=s}),__weex_bootstrap__("@weex-component/33d213ae1c7dedf0e9fbbab44c74105d",void 0,void 0)},function(t,e,n){var i=n(2),s=n(3),a=n(4);__weex_define__("@weex-component/unit",[],function(t,e,n){a(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=s})},function(t,e){t.exports={type:"div",classList:["unit-box"],children:[{type:"text",classList:["unit-number"],style:{fontSize:function(){return this.numberSize}},attr:{value:function(){return this.number}}},{type:"text",classList:["unit-text"],attr:{value:function(){return this.label}}}]}},function(t,e){t.exports={"unit-box":{flexDirection:"row",justifyContent:"center",alignItems:"flex-end"},"unit-number":{display:"inline-block",fontSize:50,color:"#111111"},"unit-text":{fontSize:22,color:"#333333",paddingLeft:20,justifyContent:"flex-end",alignItems:"flex-end"}}},function(t,e){t.exports=function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={}}},,,,function(t,e){t.exports={type:"div",classList:["message"],children:[{type:"image",shown:function(){return this.loading},classList:["loading-gif"],attr:{src:"http://img1.vued.vanthink.cn/vuedf072471d0b97d612282d1ce010cb1de1.gif"}},{type:"text",classList:["message-text"],attr:{value:function(){return this.message}}}]}},function(t,e){t.exports={message:{zIndex:2001,position:"absolute",left:30,top:30,height:60,borderRadius:30,paddingLeft:30,paddingRight:30,backgroundColor:"#ffffff",flexDirection:"row",alignItems:"center"},"message-text":{fontSize:20},"loading-gif":{width:30,height:30}}},function(t,e){t.exports=function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={}}},,,,function(t,e){t.exports={type:"div",classList:["success"],children:[{type:"div",classList:["success-data"],children:[{type:"div",classList:["distance-wrap"],children:[{type:"text",classList:["distance"],attr:{value:function(){return this.data.miles}}},{type:"text",classList:["unit"],attr:{value:"公里"}}]},{type:"div",classList:["dashboard"],children:[{type:"div",classList:["dashboard-item"],children:[{type:"div",classList:["time-wrap"],children:[{type:"text",classList:["dashboard-title"],attr:{value:"运动时间"}},{type:"text",classList:["number-lg"],attr:{value:function(){return this.data.time}}}]}]},{type:"div",classList:["dashboard-item"],children:[{type:"text",classList:["dashboard-title"],attr:{value:"热量"}},{type:"text",classList:["number-lg"],attr:{value:function(){return this.data.calories}}}]}]}]},{type:"div",style:{alignItems:"center"},children:[{type:"div",classList:["btn-leave"],events:{click:"pop"},children:[{type:"text",classList:["btn-leave-text"],attr:{value:"确认完成"}}]}]}]}},function(t,e){t.exports={success:{zIndex:2001,position:"absolute",top:0,bottom:0,left:0,right:0,backgroundColor:"rgba(0,0,0,0.85)",justifyContent:"center"},"distance-wrap":{flexDirection:"row",justifyContent:"center",alignItems:"center"},distance:{display:"inline-block",fontSize:220,color:"#ffffff"},unit:{fontSize:22,color:"#cccccc",paddingTop:30,paddingLeft:20},dashboard:{flexDirection:"row",alignItems:"center"},"dashboard-title":{color:"#999999",fontSize:25,marginBottom:20},"dashboard-item":{flex:1,paddingLeft:40,justifyContent:"center",alignItems:"center"},"number-lg":{fontSize:50,color:"#ffffff"},"btn-leave":{width:400,padding:20,marginTop:60,borderWidth:4,borderColor:"#ffffff",alignItems:"center",borderRadius:10},"btn-leave-text":{color:"#ffffff"}}},function(t,e,n){t.exports=function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n(1);var s=i("@weex-module/navigator");e.default={methods:{pop:function(){s.pop()}}}}},,,,,,,,,,function(t,e){"use strict";t.exports={calcTotal:function(t,e){var n=0;return t.forEach(function(t){n+=e?t[e]:t}),n},setTimeFormat:function(t){var e=this.setZero(Math.floor(t/3600)),n=this.setZero(Math.floor(t%3600/60)),i=this.setZero(t%60);return e+":"+n+":"+i},kmtom:function(t){return Math.floor(m/1e3).toFixed(2)},getDate:function(t){var e=new Date,n=("0"+e.getDate()).slice(-2)+"-"+("0"+(e.getMonth()+1)).slice(-2)+"-"+e.getFullYear()+" "+("0"+e.getHours()).slice(-2)+":"+("0"+e.getMinutes()).slice(-2);return n},setZero:function(t){return t<10?"0"+t:t},calcSpeed:function(t,e){return(t/e*3.6).toFixed(2)},extend:function(t,e){for(var n in e)try{e[n].constructor===Object?t[n]=this.extend(t[n],e[n]):t[n]=e[n]}catch(i){t[n]=e[n]}return t},setBundleUrl:function(t,e){var n=t,i="",s="",a=void 0,o=n.indexOf("your_current_IP")>=0||n.indexOf("file://assets/")>=0,r=n.indexOf("file:///")>=0&&n.indexOf("WeexDemo.app")>0;if(o)a="file://assets/";else if(r)a=n.substring(0,n.lastIndexOf("/")+1);else{var c=/\/\/([^\/]+?)\//.exec(n),u=/\/\/.+\/([^\/]+?)\//.exec(n);c&&c.length>=2&&(i=c[1]),u&&u.length>=2&&(s=u[1]),a="http://"+i+"/"}var l="./index.html?page=",d=a;d="undefined"==typeof navigator||"Mozilla"!==navigator.appCodeName&&"Gecko"!==navigator.product?a+s+"/":"web"===s||"dist"===s?l+"/dist/":l+"";var f=d+e;return f}}},function(t,e){t.exports={type:"div",classList:["container"],children:[{type:"weex-amap",id:"map2017",attr:{center:function(){return this.pos},sdkKey:function(){return this.keys},zoom:function(){return this.zoom}},classList:["map"],children:[{type:"weex-amap-polyline",attr:{path:function(){return this.runningData.path},strokeWidth:"3",stroke:"#3498db"}}]},{type:"div",classList:["map-controller"],children:[{type:"div",classList:["distance-wrap"],children:[{type:"text",classList:["distance"],attr:{value:function(){return this.runningData.miles}}},{type:"text",classList:["unit"],attr:{value:"公里"}}]},{type:"div",classList:["dashboard"],children:[{type:"div",classList:["dashboard-item"],children:[{type:"div",classList:["time-wrap"],children:[{type:"text",classList:["dashboard-title"],attr:{value:"运动时间"}},{type:"text",classList:["number-lg"],attr:{value:function(){return this.runningData.time}}}]}]},{type:"div",classList:["dashboard-item"],children:[{type:"text",classList:["dashboard-title"],attr:{value:"配速"}},{type:"text",classList:["number-lg"],attr:{value:function(){return this.runningData.speed}}}]},{type:"div",classList:["dashboard-item"],children:[{type:"text",classList:["dashboard-title"],attr:{value:"热量"}},{type:"text",classList:["number-lg"],attr:{value:function(){return this.runningData.calories}}}]}]},{type:"div",classList:["btn-wrap"],children:[{type:"div",classList:["btn-circle","btn-green"],shown:function(){return 1==this.status},events:{click:"start"},children:[{type:"text",classList:["btn-text"],attr:{value:"开始"}}]},{type:"div",classList:["btn-circle","btn-midnight"],shown:function(){return 2==this.status||3==this.status},events:{click:"end"},children:[{type:"text",classList:["btn-text"],attr:{value:"结束"}}]},{type:"div",classList:["btn-circle","btn-green"],shown:function(){return 3==this.status},events:{click:"continue"},children:[{type:"text",classList:["btn-text"],attr:{value:"继续"}}]},{type:"div",classList:["btn-circle","btn-red"],shown:function(){return 2==this.status},events:{click:"stop"},children:[{type:"text",classList:["btn-text"],attr:{value:"暂停"}}]}]}]},{type:"div",classList:["countdown-view"],shown:function(){return this.countdown.show},children:[{type:"text",classList:["countdown-text"],attr:{value:function(){return this.countdown.text}}}]},{type:"success",shown:function(){return 4==this.status},attr:{data:function(){return this.runningData}}}]}},function(t,e){t.exports={container:{position:"relative",flex:1,minHeight:600,backgroundColor:"#eeeeee"},"countdown-view":{zIndex:2100,position:"absolute",left:0,right:0,top:0,bottom:0,backgroundColor:"#ffffff",alignItems:"center",justifyContent:"center"},"countdown-text":{color:"#ff656d",fontSize:120},map:{flex:1,minHeight:600},"map-controller":{zIndex:2e3,position:"absolute",left:0,right:0,bottom:0,height:500,backgroundColor:"rgba(255,255,255,1)",borderTopWidth:2,borderTopColor:"rgba(0,0,0,0.25)"},"distance-wrap":{flex:1,flexDirection:"row",justifyContent:"center",alignItems:"center"},distance:{display:"inline-block",fontSize:90,color:"#111111"},unit:{fontSize:22,color:"#333333",paddingTop:30,paddingLeft:20},dashboard:{flex:1,flexDirection:"row"},"dashboard-title":{color:"#999999",fontSize:25,marginBottom:20},"dashboard-item":{flex:1,paddingLeft:40,justifyContent:"center"},"number-lg":{fontSize:42,color:"#222222"},"btn-wrap":{flex:1,flexDirection:"row",alignItems:"center",justifyContent:"center"},"btn-circle":{width:120,height:120,marginLeft:40,marginRight:40,borderRadius:120,alignItems:"center",justifyContent:"center",backgroundColor:"#eeeeee"},"btn-text":{color:"#ffffff",fontSize:20},"btn-red":{backgroundColor:"#ff626d"},"btn-green":{backgroundColor:"#21d45f"},"btn-midnight":{backgroundColor:"#34495e"}}},function(t,e,n){t.exports=function(t,e,i){"use strict";function s(t){return t&&t.__esModule?t:{default:t}}var a=n(30),o=s(a),r=n(26),c=n(33);n(34),n(1),n(35);var u=i("@weex-module/storage"),l=i("@weex-module/amap"),d=i("@weex-module/modal");t.exports={data:function(){return{keys:{h5:"f4b99dcd51752142ec0f1bdcb9a8ec02",ios:"c551f83e1e5b19af89c74096f1c0f007",android:"db6a973159cb0c2639ad02c617a786ae"},zoom:18,pos:[116.397428,39.90923],status:c.RUNNING_READY,runningData:{distance:0,miles:0,path:[],time:"00:00:00",seconds:0,speed:0,calories:0},message:"正在运行",countdown:{text:"3",show:!1},timeRecorder:null,amapRecorder:null}},methods:{start:function(){this.status=c.RUNNING_DOING,this.countdown.show=!0,this.countDownTime(),this.runningAmapGeolocation()},stop:function(){this.statsu=c.RUNNING_PAUSE,clearInterval(this.timeRecorder),clearInterval(this.amapRecorder)},continue:function(){this.status=c.RUNNING_DOING,this.countDownTime(),this.runningAmapGeolocation()},end:function(){clearInterval(this.timeRecorder),clearInterval(this.amapRecorder);var t=this;console.log(1),u.getItem("runningData",function(e){var n=[];"success"==e.result&&(n=e.data),"string"==typeof n&&(n=JSON.parse(n)),n.unshift(r.extend({date:r.getDate().replace(/\s./,""),standrandDate:r.getDate()},t.runningData)),console.log(n),u.setItem("runningData",(0,o.default)(n),function(e){"success"==e.result&&(t.status=c.RUNNING_END)})})},setUserLocation:function(t){l.getUserLocation(this.$el("map2017").ref,t)},countDownTime:function(){var t=this;this.status==c.RUNNING_DOING&&(this.countdown.show=!0),this.timeRecorder=setInterval(function(){t.runningData.seconds++,t.runningData.seconds<=4&&(3==t.runningData.seconds?t.countdown.text="GO!":4==t.runningData.seconds?t.countdown.show=!1:t.countdown.text=3-t.runningData.seconds),t.runningData.time=r.setTimeFormat(t.runningData.seconds)},1e3)},runningAmapGeolocation:function(){var t=this;this.setUserLocation(function(e){"success"==e.result&&(t.pos=e.data.position,t.runningData.path.push(e.data.position))}),this.amapRecorder=setInterval(function(){t.setUserLocation(function(e){"success"==e.result&&(t.pos=e.data.position,t.runningData.path.push(e.data.position),t.calcDistanceAndSpeed())})},1e4)},calcDistanceAndSpeed:function(){var t=this,e=this.runningData.path.length;e>1&&l.getLineDistance(this.runningData.path[e-1],this.runningData.path[e-2],function(e){"success"==e.result&&(d.alert({message:e.data.distance}),t.runningData.distance+=e.data.distance,t.runningData.miles=r.kntom(t.runningData.distance)),t.runningData.calories=(t.runningData.distance/1e3).toFixed(2),t.runningData.speed=r.calcSpeed(t.runningData.distance,t.runningData.seconds)})}}}}},function(t,e,n){t.exports={default:n(31),__esModule:!0}},function(t,e,n){var i=n(32),s=i.JSON||(i.JSON={stringify:JSON.stringify});t.exports=function(t){return s.stringify.apply(s,arguments)}},function(t,e){var n=t.exports={version:"2.4.0"};"number"==typeof __e&&(__e=n)},function(t,e){"use strict";t.exports={RUNNING_READY:1,RUNNING_DOING:2,RUNNING_PAUSE:3,RUNNING_END:4}},function(t,e,n){var i=n(8),s=n(9),a=n(10);__weex_define__("@weex-component/message",[],function(t,e,n){a(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=s})},function(t,e,n){var i=n(14),s=n(15),a=n(16);__weex_define__("@weex-component/success",[],function(t,e,n){a(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=s})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,